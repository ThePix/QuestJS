"use strict"

//@DOC
// ## ITEM LINKS LIB
//
// VERSION 0.11
//
// AUTHOR: KV
//
// DESCRIPTION:  Add hyperlink functionality to [QuestJS](https://github.com/ThePix/QuestJS)
//
// (Documentation generated by [PixDocs](https://github.com/ThePix/PixDocs))
//
//---
//
// ##### **NOTE**
//
// #####  This library is now included in [QuestJS](https://github.com/ThePix/QuestJS) as of QuestJS version 0.4, but this library is not loaded by default.
//
// #####  View [the setup instructions](https://github.com/ThePix/QuestJS/wiki/Hyperlinks).
//
//---
//@UNDOC

/*
Developer comments

There are two parts to this, exits and items.

Exits is trivial; we just subvert the text processor directive that states the exits;
have it disable all the existing exits, then output the new ones with links added.

Items is far more complex...

This is what the HTML looks like. The object is in the first child of the child span, with the verbs collected in the second.
JS dataset attributes are used to store data, including all the options sent to lang.getName, so we can reproduce it.

This means if the item changes its alias, the text could get changed.

<span class="object-link dropdown" 
      data-objname="book" 
      data-article="1"
      data-lastSep="and" 
      data-modified="true" 
      data-nothing="nothing" 
      data-loc="lounge" 
      data-sep=",">
  <span class="object-link dropdown" data-objname="book" data-article="1" data-lastSep="and" data-modified="false" data-nothing="nothing" data-loc="lounge" data-sep=",">
    <span onclick="itemLinks.itemClick(this)" obj="book" class="droplink" name="book-link">
      a book
    </span>
    <span obj="book" class="dropdown-content">
      <span obj="book-verbs-list-holder">
        <span class="list-link-verb" onclick="itemLinks.itemLinkClick(this)" data-linkverb="Examine" data-objname="book" data-objalias="book">
          Examine
        </span>
        <span class="list-link-verb" onclick="itemLinks.itemLinkClick(this)" data-linkverb="Take" data-objname="book" data-objalias="book">
          Take
        </span>
      </span>
    </span>
  </span>
</span>



*/






//@DOC
//### Function: _itemLinks.update_()
//
// Keeps the verb links and exit links updated after each turn.
//
//---
//@UNDOC
const itemLinks = {}
io.modulesToUpdate.push(itemLinks)

itemLinks.update = function() {
	if (!settings.linksEnabled) return

  for (const el of document.querySelectorAll(".object-link")) {
		const obj = w[el.dataset.objname]
    if (!obj.scopeStatus.canReach && !obj.scopeStatus.canSee) {
      itemLinks.disableItemLink(el)
    }
    else {
      itemLinks.updateItemLinks(el)
    }
	}
}








//@DOC
// Returns **&lt;STRING&gt;**
//
// - all available verbs for the item.
//
// **PARAM:**
//
// - ```obj``` - **&lt;OBJECT&gt;** The in-game item
//
//---
itemLinks.getVerbsLinks = function(obj){
  if (!obj.getVerbs) return  // if a room

	let verbArr = obj.getVerbs()
	let s = ''
  for (const o of verbArr) {
    s += '<span class="list-link-verb" onclick="itemLinks.itemLinkClick(this)" '
    s += `data-linkverb="${o}" data-objname="${obj.name}" data-objalias="${obj.alias}">${sentenceCase(o)}</span>`
	}
	return s
}




itemLinks.itemClick = function(el) {
  const originallyShown = el.nextSibling.style.display === 'block'
  
  for (const el of document.querySelectorAll(".dropdown-content")) {
    el.style.display = 'none'
  }
  if (!originallyShown) el.nextSibling.style.display = 'block'
}


itemLinks.itemLinkClick = function(el) {
  io.toggleDisplay(el.parentNode.parentNode)
  runCmd(el.dataset.linkverb + ' ' + el.dataset.objalias)
}



//@DOC
//  Disables the item link class. (Used when an item is out of scope.)
//
// **PARAM:**
//
// - ```el``` - **&lt;OBJECT&gt;** The HTML element
//
//---
itemLinks.disableItemLink = function(el) {
  el.children[0].removeAttribute('onclick')
  //el.classList.remove('object-link')
  el.classList.remove('dropdown')
  el.children[0].classList.remove('droplink')
  //el.style.cursor = 'default'
}

//@DOC
//  Enables the item link class.  (Used when an item is in scope.)
//
// **PARAM:**
//
// - ```el``` - **&lt;OBJECT&gt;** The HTML element
//
//---
itemLinks.updateItemLinks = function(el) {
  const obj = w[el.dataset.objname]
  const alias = el.children[0].innerHTML
  el.innerHTML = null
  el.outerHTML = settings.nameTransformer(alias, obj)
}


itemLinks.updateItemLinks2 = function(el) {
  const obj = w[el.dataset.objname]
  const options = {}
  for (const key in el.dataset) options[key] = util.guessMyType(el.dataset[key])
  options.modified = false
  el.innerHTML = lang.getName(obj, options)
}


itemLinks.disableAllLinks = function(className) {
  for (const el of document.querySelectorAll("." + className)) {
    el.removeAttribute('onclick')
    el.classList.remove(className)
  }
}







//@DOC
// ### Function: _tp.text_processors.exits(arr, params)
//
//  Modified to return a string containing a list of exit links.
//
// Returns **&lt;STRING&gt;**
//
// - string with a list of exit links
//
// **PARAMS:**
//
// - ```arr``` - **&lt;ARRAY&gt;** TODO: Ask Pixie how to describe this.
//
// - ```params``` - **&lt;OBJECT&gt;** TODO: Ask Pixie how to describe this.
//
// ---
//@UNDOC
tp.text_processors.exitsHere = function(arr, params) {
  itemLinks.disableAllLinks('exit-link')
  const list = w[player.loc].getExitDirs().map(el => '<span class="exit-link" onclick="runCmd(\'' + el + '\')">' + el + '</span>')
  return formatList(list, {lastSep:lang.list_or, nothing:lang.list_nowhere});
}








// Set to ```true``` by this library to enable the links
settings.linksEnabled = true;


settings.afterFinish.push(function(){
  itemLinks.disableAllLinks('exit-link')
  itemLinks.disableAllLinks('dropdown')
  itemLinks.disableAllLinks('droplink')
  itemLinks.disableAllLinks('cmd-link')
})



//@DOC
// Used by lang.getName to add HTML link tags, etc
//
// Returns **&lt;STRING&gt;**
//
// - The item's link
//
// **PARAMS:**
//
// - ```alias``` - **&lt;STRING&gt;** The iitem's name, as prepared by lang.getName
// - ```obj``` - **&lt;OBJECT&gt;** The in-game item
//
//---
settings.nameTransformer = function(alias, obj, options = {}) {
	if(!settings.linksEnabled) return alias
	if(options.noLink) return alias

	let s = `<span class="object-link dropdown" data-objname="${obj.name}"` 
  //for (const key in options) s += ` data-${key}="${options[key]}"`
	s += '><span onclick="itemLinks.itemClick(this)" '
  s += `obj="${obj.name}" class="droplink" name="${obj.name}-link">${alias}</span>`
	s += `<span obj="${obj.name}" class="dropdown-content">`
	s += `<span obj="${obj.name}-verbs-list-holder">`
	s += itemLinks.getVerbsLinks(obj);
	s += '</span></span></span>'
	return s;
}




//@DOC
// [Back to top](#item-links-lib)
//@UNDOC
